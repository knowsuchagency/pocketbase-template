# PocketBase Template Project

## Overview
Go-based backend-as-a-service (BaaS) application built on PocketBase (v0.28+) with React Router v7 frontend.

## Project Structure
- Backend: Go-based PocketBase application
- Frontend: React Router v7 SPA with Tailwind CSS and DaisyUI
- Database: SQLite (embedded in PocketBase)
- Deployment: Docker multi-stage build

## Quick Commands
```bash
# Backend
just dev-pb                   # Start PocketBase dev server with --dev flag
just dev                      # Run both frontend and backend concurrently
just makemigration "name"     # Create new migration
just migrate                  # Run migrations
just migratedown             # Rollback last migration
just show-schema             # Display database schema

# Frontend
just dev-bun                  # Run bun dev server
cd frontend
bun install                   # Install deps
bun run dev                   # Dev server
bun run build                 # Build static files
bun run typecheck             # Run TypeScript checks

# Build & Dependencies
just build                    # Build frontend and backend
just update-deps             # Update all Go dependencies
just update-pocketbase       # Update PocketBase to latest
just check-updates           # Check for available updates


# Docker
docker-compose up -d          # Start services
docker-compose build          # Rebuild images
```

## Key Points
- Single binary with embedded SQLite database
- Auto-migration enabled in development (via `--dev` flag)
- Migrations in `_ "app/migrations"` module
- Data persistence in `pb_data/` directory
- Frontend static files served from `frontend/build/client/`
- Docker support with Alpine-based multi-stage build

## Development Guidelines

### Backend (Go/PocketBase)
- PocketBase version > v0.28 (breaking changes)
- Use `just dev-pb` or `go run main.go serve --dev` for development
- Migrations in `migrations/` directory
- Static files served from `frontend/build/client/`
- Custom routes via `app.OnServe().BindFunc()`

### Frontend (React Router)
- Use `bun` as package manager (not npm)
- SSR disabled for SPA mode (ssr: false in config)
- Build outputs to `frontend/build/client/`
- React v19 with React Router v7
- Client-side routing with index.html fallback

### Code Style
- Follow existing patterns in codebase
- Use TypeScript for frontend code
- Minimal comments unless necessary
- Check imports before adding new dependencies

### Testing & Quality
- Run `bun run typecheck` before committing frontend changes
- Test builds with `docker-compose build`

### Environment Variables
- `SUPERUSER_EMAIL`: Initial admin email
- `SUPERUSER_PASSWORD`: Initial admin password
- `SMTP_USERNAME`: For email configuration
- `SMTP_PASSWORD`: For email configuration
- `POCKETBASE_URL`: API URL for frontend builds

### Docker
- Frontend built with `oven/bun:1`
- Backend built with `golang:1.24-alpine`
- Runtime uses `alpine:latest`
- Data persisted in `./pb_data`


## Migration Guidelines
- Use `just makemigration` to create migrations
- Each migration has up/down functions
- For Collection operations, check: https://pocketbase.io/docs/go-collections/

## Important Notes
- Never commit secrets or API keys
- Frontend API calls should use relative paths
- Static files served at root path by PocketBase using apis.Static()
- Frontend served directly from `frontend/build/client/` directory
